/**

 The Web Service for the Emule Project
 Fergus Leen Jan 2017 (fl376@cl.cam.ac.uk)
 
*/
//SET SERVICE NAME HERE:-
var servicename='rachel';
var rootdir='/opt/emulewebservice';
var express = require('express');
var multer = require('multer');
var fs = require('fs');
var path = require('path');
var os = require('os');
var passport = require('passport');
var HttpBasicAuth = require('passport-http').BasicStrategy;
var app = express();

var morgan = require('morgan');
app.use(morgan('combined'));

var mongoose = require('mongoose');
mongoose.set('debug', true);
// Use native Node promises
mongoose.Promise = global.Promise;
// connect to MongoDB
mongoose.connect('mongodb://localhost/emule')
  .then(() =>  console.log('connection succesful'))
  .catch((err) => console.log('Mongo Unavailable - Remote?')); //console.error(err));

var UPLOAD_PATH = "./uploads/";
var SERVER_PORT = 3000;

var basicAuthUser = {
    username: "test",
    password: "pass"
};

function printRequestHeaders(req) {
    console.log("\nReceived headers");
    console.log("----------------");

    for (var key in req.headers) {
        console.log(key + ": " + req.headers[key]);
    }

    console.log("");
}

function printRequestParameters(req) {
    console.log("\nReceived Parameters");
    console.log("-------------------");

    for (var key in req.body) {
        console.log(key + ": " + req.body[key]);
    }

    if (Object.keys(req.body).length === 0)
        console.log("no text parameters\n");
    else
        console.log("");
}

function getEndpoints(ipAddress) {
    return "HTTP/Multipart:              http://" + ipAddress + ":" + SERVER_PORT + "/upload/multipart\n" +
           "HTTP/Multipart (Basic Auth): http://" + ipAddress + ":" + SERVER_PORT + "/upload/multipart-ba\n"
}

function printAvailableEndpoints() {
    var ifaces = os.networkInterfaces();

    Object.keys(ifaces).forEach(function (ifname) {
        ifaces[ifname].forEach(function (iface) {
            // skip internal (i.e. 127.0.0.1) and non-ipv4 addresses
            if ('IPv4' !== iface.family || iface.internal !== false) {
                return;
            }

            console.log(getEndpoints(iface.address));
        });
    });
}

var multipartReqInterceptor = function(req, res, next) {
    console.log("\n\nHTTP/Multipart Upload Request from: " + req.ip);
    printRequestHeaders(req);

    next();
};

// configure passport for Basic Auth strategy
passport.use('basic-admin', new HttpBasicAuth({ realm: 'Upload Service' },
    function(username, password, done) {
        if (username === basicAuthUser.username &&
            password === basicAuthUser.password)  {
            return done(null, basicAuthUser);
        }
        return done(null, false);
    }
));

app.use(passport.initialize());
var useBasicAuth = passport.authenticate('basic-admin', { session: false });

// configure multer for upload management
var fileUploadCompleted = false;
var multerFiles = multer({
    dest: UPLOAD_PATH,
    rename: function (fieldname, filename) {
        return filename;
    },

    onParseEnd: function(req, next) {
        printRequestParameters(req);

        next();
    },

    onFileUploadStart: function (file) {
        console.log("Started file upload\n  parameter name: " +
                    file.fieldname + "\n  file name: " +
                    file.originalname + "\n  mime type: " + file.mimetype);
    },

    onFileUploadComplete: function (file) {
        var fullPath = path.resolve(UPLOAD_PATH, file.originalname);
        console.log("Completed file upload\n  parameter name: " +
                    file.fieldname + "\n  file name: " +
                    file.originalname + "\n  mime type: " + file.mimetype +
                    "\n  in: " + fullPath);
        fileUploadCompleted = true;
    }
});

app.get('/', function(req, res) {
    res.end(servicename);
});


/**
Remote call. This zips  the local bSMTP files and returns a URL
unch the shell command to tar bsmtp files
return JSON to client. 

*/
app.get('/get-bundle-list', function(req,res){
var exec = require('child_process').exec;
var cmd = rootdir+'/bin/zip_mailup.sh';
var filename;
	exec(cmd, function(error, stdout, stderr) {
 		 // command output is in stdout
		console.log("Compresing mail " + stdout + error + stderr);
		filename=stdout;
		if (!stdout){
			res.end("[]");
			console.log("Nothing to do");
			
		}else{
			res.end(stdout);
		}
	});	

});



/**
	Gateway Call
	getBundleByName(ap)
	The android app chooses which remote AP's to sync with,
	This call will check the /var/spool/mail directory for the 
	ap(.domain.com). If the file is empty or nonexistant, return null,
	if there is data, zip and mail as above.
*/
app.get('/get-bundle-byname', function(req,res){
	
	try{
		var filesize= getFilesizeInBytes("/var/spool/mail/"+req.query.apname);
	}catch(err)
	{
		console.log("\n\n No file found. Bundle request from: " + req.ip + " for " + req.query.apname + " fs="+filesize);

		res.end("");
	}
	
	console.log("\n\nbundle request from: " + req.ip + " for " + req.query.apname + " fs="+filesize);
	if (filesize>0){
		
	
		var exec = require('child_process').exec;
		var cmd = rootdir+'/bin/gateway_zip_mailup.sh '+req.query.apname;
		var filename;
		exec(cmd, function(error, stdout, stderr) {
 		 // command output is in stdout
			console.log("Compresing mail " + stdout + error + stderr);
			filename=stdout;
			res.end(stdout);
		});	

	};
});


/**
 Gateway listAvailableBundles
 Return a simple array list of names of avaiable bundles.
 
 */ 
 
app.get('/get-available-bundles', function(req,res){
	
	fs.readdir("/var/spool/mail/", function(err, items) {
    console.log(items);
    var resfiles=[];
    var x=0;
    for (var i=0; i<items.length; i++) {
        console.log(items[i]);
       // var filesize = getFilesizeInBytes("/var/spool/mail/"+items[i]);
        if (items[i].includes("cambridgeontime")){
        	resfiles[x++]=items[i];
    	}
	}
	res.end(JSON.stringify(resfiles));
	});
	

});



function getFilesizeInBytes(filename) {
 var stats = fs.statSync(filename)
 var fileSizeInBytes = stats["size"]
 return fileSizeInBytes
}



var multipartUploadHandler = function(req, res) {
    if (fileUploadCompleted) {
        fileUploadCompleted = false;
        res.header('transfer-encoding', ''); // disable chunked transfer encoding
        var exec = require('child_process').exec;
        var cmd = rootdir+'/bin/send_mail_from_zip.sh';
        exec(cmd, function(error, stdout, stderr) {
        // command output is in stdout
                console.log("Sending Mails " + stdout + error + stderr);
                res.end(stdout);
        });
    }
};


// handle multipart uploads
app.post('/upload/multipart', multipartReqInterceptor, multerFiles, multipartUploadHandler);
app.post('/upload/multipart-ba', useBasicAuth, multipartReqInterceptor, multerFiles, multipartUploadHandler);


var server = app.listen(SERVER_PORT, function() {
    console.log("Web server started. Listening on all interfaces on port " +
                server.address().port);

    console.log("\nThe following endpoints are available\n");
    printAvailableEndpoints();

    console.log("Basic auth credentials are: " + JSON.stringify(basicAuthUser));
});
var accesspoints = require('./routes/accesspoints');
app.use('/accesspoints',accesspoints);
